{"version":3,"sources":["components/SliderItems/SliderItems.tsx","containers/people-around-you/index.tsx","components/GalleryItem/GalleryItem.tsx","containers/featured/index.tsx","constant/api.constants.tsx","services/loadDataService.tsx","App.tsx","serviceWorker.ts","index.tsx","assets/img/pin.svg"],"names":["SliderItems","props","Fragment","className","src","img","alt","title","pin","location","SwiperCore","use","Navigation","navigation","autoHeight","setWrapperSize","centeredSlides","spaceBetween","slidesPerView","loop","peopleAround","map","item","index","key","GalleryItem","featured","apiConstants","loadDataService","loadFeatured","url","axios","get","then","response","data","console","log","loadPeopleAroundYou","App","useState","peoplesAroundYou","setPeopleAroundYou","searchedPlaces","setSearchPlaces","featuredPlaces","setFeaturedPlaces","loading","setLoading","useEffect","a","d","catch","e","fetchDetails","type","placeholder","onChange","val","target","value","length","filteredPlaces","filter","place","toLowerCase","includes","searchHandler","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message","module","exports"],"mappings":"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","file":"static/js/main.add25538.chunk.js","sourcesContent":["import React from 'react';\nimport pin from '../../assets/img/pin.svg';\nimport { Places } from '../../interfaces/places.interface';\n\nconst SliderItems = (props: Places) => {\n  return (\n    <React.Fragment>\n      <div className=\"swiper-slide popular__slide\">\n        <img src={props.img} alt=\"\" className=\"popular__slide-img\" />\n        <div className=\"popular__slide-description\">\n          <h3>{props.title}</h3>\n          <h4>\n            <img src={pin} alt=\"pin\" className=\"popular__slide-icon\" />\n            {props.location}\n          </h4>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default SliderItems;\n","import React from 'react';\n\n// import Swiper core and required components\nimport SwiperCore, { Navigation } from 'swiper';\n\nimport { Swiper, SwiperSlide } from 'swiper/react';\n\n// Import Swiper styles\nimport 'swiper/swiper.scss';\nimport 'swiper/components/navigation/navigation.scss';\nimport SliderItems from '../../components/SliderItems/SliderItems';\nimport { Places } from '../../interfaces/places.interface';\n\n// install Swiper components\nSwiperCore.use([Navigation]);\n\nexport default (props: { peopleAround: Places[] }) => {\n  return (\n    <React.Fragment>\n      <h2 className=\"popular__title\">Popular around you</h2>\n      <div className=\"popular__slider\">\n        <div className=\"swiper-container\">\n          <Swiper\n            navigation={{}}\n            autoHeight\n            setWrapperSize\n            centeredSlides={false}\n            spaceBetween={20}\n            slidesPerView={4}\n            loop={true}\n          >\n            {props.peopleAround.map((item: Places, index: number) => {\n              return (\n                <SwiperSlide key={index}>\n                  <SliderItems {...item} />\n                </SwiperSlide>\n              );\n            })}\n          </Swiper>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n","import React from 'react';\nimport pin from '../../assets/img/pin.svg';\nimport { Places } from '../../interfaces/places.interface';\n\nconst GalleryItem = (props: Places) => {\n  return (\n    <React.Fragment>\n      <div className=\"popular__gallery-element\">\n        <img src={props.img} alt=\"\" className=\"popular__gallery-img\" />\n\n        <div className=\"popular__gallery-description\">\n          <h3>{props.title}</h3>\n          <h4>\n            <img src={pin} alt=\"pin\" className=\"popular__gallery-icon\" />\n            {props.location}\n          </h4>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default GalleryItem;\n","import React from 'react';\nimport GalleryItem from '../../components/GalleryItem/GalleryItem';\nimport { Places } from '../../interfaces/places.interface';\n\nexport default (props: { featured: Places[] }) => {\n  return (\n    <React.Fragment>\n      <h2 className=\"popular__title\">Featured</h2>\n\n      <div className=\"popular__gallery\">\n        {props.featured.map((item, index) => {\n          return <GalleryItem key={'g_' + index} {...item} />;\n        })}\n      </div>\n    </React.Fragment>\n  );\n};\n","export const apiConstants = {\n  baseURL: 'http://demo3136867.mockable.io',\n};\n","import { apiConstants } from '../constant/api.constants';\nimport axios from 'axios';\n\nexport const loadDataService = {\n  loadFeatured: loadFeatured,\n  loadPeopleAroundYou: loadPeopleAroundYou,\n};\n\nfunction loadFeatured() {\n  const url = `${apiConstants.baseURL}/featured`;\n  return axios\n    .get(url)\n    .then((response) => response.data)\n    .then((data) => {\n      console.log('Axios featured data=', data);\n      return data;\n    });\n}\n\nfunction loadPeopleAroundYou() {\n  const url = `${apiConstants.baseURL}/carousel`;\n  return axios\n    .get(url)\n    .then((response) => response.data)\n    .then((data) => {\n      console.log('Axios people around you data=', data);\n      return data;\n    });\n}\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\n\nimport PeopleAroundYou from './containers/people-around-you';\nimport Featured from './containers/featured';\n\n// Service imported\nimport { loadDataService } from './services/loadDataService';\nimport { Places } from './interfaces/places.interface';\n\nfunction App() {\n  const [peoplesAroundYou, setPeopleAroundYou] = useState([]);\n  const [searchedPlaces, setSearchPlaces] = useState([]);\n  const [featuredPlaces, setFeaturedPlaces] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    setLoading(true);\n\n    async function fetchDetails() {\n      await loadDataService\n        .loadPeopleAroundYou()\n        .then((d) => {\n          setPeopleAroundYou(d.data);\n          setSearchPlaces(d.data);\n        })\n        .catch((e) => {\n          setPeopleAroundYou([]);\n        });\n      await loadDataService\n        .loadFeatured()\n        .then((d) => {\n          setFeaturedPlaces(d.data);\n        })\n        .catch((e) => {\n          setFeaturedPlaces([]);\n        });\n      setLoading(false);\n    }\n\n    // Execute the created function directly\n    fetchDetails();\n  }, []);\n\n  const searchHandler = (e: any) => {\n    const val = e.target.value;\n    if (val.length > 0) {\n      const filteredPlaces = peoplesAroundYou.filter((place: Places) =>\n        place?.title?.toLowerCase().includes(val)\n      );\n      setSearchPlaces(filteredPlaces);\n    } else {\n      setSearchPlaces(peoplesAroundYou);\n    }\n  };\n\n  return (\n    <div className=\"popular\">\n      <div className=\"popular__container\">\n        <div className=\"popular__search\">\n          <input\n            type=\"text\"\n            placeholder=\"Search for...\"\n            onChange={(e) => searchHandler(e)}\n          />\n        </div>\n\n        <div className=\"popular__content\">\n          {searchedPlaces.length > 0 && !loading ? (\n            <PeopleAroundYou {...{ peopleAround: searchedPlaces }} />\n          ) : searchedPlaces.length === 0 && !loading ? (\n            <p> No Data found</p>\n          ) : (\n            <p>Loading ....</p>\n          )}\n\n          {featuredPlaces.length > 0 && !loading ? (\n            <Featured {...{ featured: featuredPlaces }} />\n          ) : featuredPlaces.length === 0 && !loading ? (\n            <p> No Data found</p>\n          ) : (\n            <p>Loading ....</p>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/pin.b65b567b.svg\";"],"sourceRoot":""}